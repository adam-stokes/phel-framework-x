(ns phel-test\test\http
  (:require phel\http :as h)
  (:require phel\test :refer [deftest is]))

# Tests adopted from nyholm/psr7-server

# ---
# URI
# ---

(def uri-server-default
  (php-associative-array
   "SERVER_NAME" "phel-lang.org"
   "QUERY_STRING" "id=10&user=foo"
   "HTTP_HOST" "phel-lang.org"
   "HTTPS" "1"
   "SERVER_PORT" "80"
   "REQUEST_URI" "/doc/article.php?id=10&user=foo"))

(def uri-examples
  [["normal request"
    (h/uri "http" nil "phel-lang.org" 80 "/doc/article.php" "id=10&user=foo" nil)
    uri-server-default]
   ["secure request"
    (h/uri "https" nil "phel-lang.org" 443 "/doc/article.php" "id=10&user=foo" nil)
    (php/array_merge uri-server-default (php-associative-array "HTTPS" "on" "SERVER_PORT" "443"))]
   ["secure request via proxy"
    (h/uri "https" nil "phel-lang.org" 80 "/doc/article.php" "id=10&user=foo" nil)
    (php/array_merge uri-server-default (php-associative-array "HTTP_X_FORWARDED_PROTO" "https" "SERVER_PORT" "80"))]
   ["http host missing"
    (h/uri "http" nil "phel-lang.org" 80 "/doc/article.php" "id=10&user=foo" nil)
    (php/array_merge uri-server-default (php-associative-array "HTTP_HOST" nil))]
   ["no query string"
    (h/uri "http" nil "phel-lang.org" 80 "/doc/article.php" "" nil)
    (php/array_merge uri-server-default (php-associative-array "REQUEST_URI" "/doc/article.php" "QUERY_STRING" ""))]
   ["different port"
    (h/uri "http" nil "phel-lang.org" 8081 "/doc/article.php" "id=10&user=foo" nil)
    (php/array_merge uri-server-default (php-associative-array "SERVER_PORT" "8081" "HTTP_HOST" "phel-lang.org:8081"))]
   ["IPv4"
    (h/uri "http" nil "127.0.0.1" 80 "/doc/article.php" "id=10&user=foo" nil)
    (php/array_merge uri-server-default (php-associative-array "SERVER_PORT" "80" "HTTP_HOST" "127.0.0.1"))]
   ["IPv4 with port"
    (h/uri "http" nil "127.0.0.1" 8081 "/doc/article.php" "id=10&user=foo" nil)
    (php/array_merge uri-server-default (php-associative-array "SERVER_PORT" "8081" "HTTP_HOST" "127.0.0.1:8081"))]
   ["IPv6 with port"
    (h/uri "http" nil "::1" 8081 "/doc/article.php" "id=10&user=foo" nil)
    (php/array_merge uri-server-default (php-associative-array "SERVER_PORT" "8081" "HTTP_HOST" "::1:8081"))]
   ["empty server variable"
    (h/uri nil nil nil 0 nil nil nil)
    (php/array)]])

(deftest test-url
  (foreach [[name uri server] uri-examples]
    (is (= uri (h/uri-from-globals server)) name)))


# -----
# FILES
# -----

(def file-examples
  [["single file"
    (php-associative-array "file" (php-associative-array
                                   "name" "my-file.txt"
                                   "type" "text/plain"
                                   "tmp_name" "/tmp/my-file.txt"
                                   "error" "0"
                                   "size" "123"))
    {"file" (h/uploaded-file "/tmp/my-file.txt" 123 0 "my-file.txt" "text/plain")}]
   ["already converted"
    (php-associative-array "file" (h/uploaded-file
                                   "/tmp/my-file.txt"
                                   123
                                   0
                                   "my-file.txt"
                                   "text/plain"))
    {"file" (h/uploaded-file "/tmp/my-file.txt" 123 0 "my-file.txt" "text/plain")}]
   ["already converted array"
    (php-associative-array "file" [(h/uploaded-file "/tmp/my-file1.txt" 123 0 "my-file1.txt" "text/plain")
                                   (h/uploaded-file "/tmp/my-file2.txt" 321 0 "my-file2.txt" "text/plain")])
    {"file" {0 (h/uploaded-file "/tmp/my-file1.txt" 123 0 "my-file1.txt" "text/plain")
             1 (h/uploaded-file "/tmp/my-file2.txt" 321 0 "my-file2.txt" "text/plain")}}]
   ["multiple files"
    (php-associative-array
     "file-1" (php-associative-array
               "name" "my-file.txt"
               "type" "text/plain"
               "tmp_name" "/tmp/my-file.txt"
               "error" "0"
               "size" "123")
     "file-2" (php-associative-array
               "name" ""
               "type" ""
               "tmp_name" "/tmp/my-file-2.txt"
               "error" "4"
               "size" "0"))
    {"file-1" (h/uploaded-file "/tmp/my-file.txt" 123 0 "my-file.txt" "text/plain")
     "file-2" (h/uploaded-file "/tmp/my-file-2.txt" 0 4 "" "")}]
   ["nested files"
    (php-associative-array
     "files" (php-associative-array
              "name" (php/array "my-file.txt" "Image.png")
              "type" (php/array "text/plain" "image/png")
              "tmp_name" (php/array "/tmp/my-file.txt" "/tmp/my-image.png")
              "error" (php/array "0" "1")
              "size" (php/array "123" "4321"))
     "nested" (php-associative-array
               "name" (php-associative-array
                       "a" "a.txt"
                       "b" (php/array "b.txt" ""))
               "type" (php-associative-array
                       "a" "text/plain"
                       "b" (php/array "text/plain" ""))
               "tmp_name" (php-associative-array
                           "a" "/tmp/a.txt"
                           "b" (php/array "/tmp/b1.txt" "/tmp/b2.txt"))
               "error" (php-associative-array
                        "a" "0"
                        "b" (php/array "0" "4"))
               "size" (php-associative-array
                       "a" "421"
                       "b" (php/array "32" "0"))))
    {"files" {0 (h/uploaded-file "/tmp/my-file.txt" 123 0 "my-file.txt" "text/plain")
              1 (h/uploaded-file "/tmp/my-image.png" 4321 1 "Image.png" "image/png")}
      "nested" {"a" (h/uploaded-file "/tmp/a.txt" 421 0 "a.txt" "text/plain")
                "b" {0 (h/uploaded-file "/tmp/b1.txt" 32 0 "b.txt" "text/plain")
                     1 (h/uploaded-file "/tmp/b2.txt" 0 4 "" "")}}}]])

(deftest test-files-from-globals
  (foreach [[name files result] file-examples]
    (is (= result (h/files-from-globals files)) name)))

# -------
# Headers
# -------

(deftest test-headers-from-server
  (is (=
       {:0 "NumericHeaderZero"
        :1234 "NumericHeader"
        :cookie "COOKIE"
        :authorization "token"
        :content-type "application/json"
        :accept "application/json"
        :x-foo-bar "FOOBAR"
        :content-md5 "CONTENT-MD5"
        :content-length "UNSPECIFIED"}
       (h/headers-from-server (php-associative-array
                               "HTTP_0" "NumericHeaderZero"
                               "HTTP_1234" "NumericHeader"
                               "HTTP_COOKIE" "COOKIE"
                               "HTTP_AUTHORIZATION" "token"
                               "HTTP_CONTENT_TYPE" "application/json"
                               "HTTP_ACCEPT" "application/json"
                               "HTTP_X_FOO_BAR" "FOOBAR"
                               "CONTENT_MD5" "CONTENT-MD5"
                               "CONTENT_LENGTH" "UNSPECIFIED")))
      "header from globals")
  (is (=
       {:x-foo-bar "nonprefixed"
        :authorization "token"}
       (h/headers-from-server (php-associative-array
                               "HTTP_X_FOO_BAR" "nonprefixed"
                               "REDIRECT_HTTP_AUTHORIZATION" "token"
                               "REDIRECT_HTTP_X_FOO_BAR" "prefixed")))
      "header from globals redirect normalization"))

# -------
# Request
# -------

(deftest test-request-get
  (is (=
       "GET"
       (get
        (h/request-from-globals-args
         (php-associative-array "REQUEST_METHOD" "GET")
         (php-associative-array)
         (php-associative-array)
         (php-associative-array)
         (php-associative-array))
        :method))
      "request method get"))

(deftest test-request-post
  (is (=
       "POST"
       (get
        (h/request-from-globals-args
         (php-associative-array "REQUEST_METHOD" "POST")
         (php-associative-array)
         (php-associative-array)
         (php-associative-array)
         (php-associative-array))
        :method))
      "request method post"))

(deftest test-request-post-with-form-data
  (is (=
       {"name" "phel"  "type" "lang"}
       (get
        (h/request-from-globals-args
         (php-associative-array
          "REQUEST_METHOD" "POST"
          "CONTENT_TYPE" "multipart/form-data")
         (php-associative-array)
         (php-associative-array
          "name" "phel"
          "type" "lang")
         (php-associative-array)
         (php-associative-array))
        :parsed-body))
      "request method post with form data"))

(deftest test-request-server-protocol-1
  (is (=
       "1.1"
       (get
        (h/request-from-globals-args
         (php-associative-array
          "SERVER_PROTOCOL" "HTTP/1.1"
          "REQUEST_METHOD" "GET")
         (php-associative-array)
         (php-associative-array)
         (php-associative-array)
         (php-associative-array))
        :version))
      "server protocol 1.1"))

(deftest test-request-server-protocol-2
  (is (=
       "2.0"
       (get
        (h/request-from-globals-args
         (php-associative-array
          "SERVER_PROTOCOL" "HTTP/2.0"
          "REQUEST_METHOD" "GET")
         (php-associative-array)
         (php-associative-array)
         (php-associative-array)
         (php-associative-array))
        :version))
      "server protocol 2.0"))

# --------
# Response
# --------

# TODO: Headers cannot be tested at this point
# because the test script already has send some output
# and new headers cannot be send anymore.

(deftest test-response
  (is (=
       (h/response 200 {} "" "1.1" "OK")
       (h/create-response-from-map {})) "create-response-from-map empty")

  (is (=
       (h/response 201 {} "" "1.1" "Created")
       (h/create-response-from-map {:status 201})) "create-response-from-map status")

  (is (=
       (h/response 200 {:content-type "text/plain"} "" "1.1" "OK")
       (h/create-response-from-map {:headers {:content-type "text/plain"}})) "create-response-from-map headers")

  (is (=
       (h/response 200 {} "hello" "1.1" "OK")
       (h/create-response-from-map {:body "hello"})) "create-response-from-map body")

  (is (=
       (h/response 200 {} "" "2.0" "OK")
       (h/create-response-from-map {:version "2.0"})) "create-response-from-map version")

  (is (=
       (h/response 200 {} "" "1.1" "Yes!")
       (h/create-response-from-map {:reason "Yes!"})) "create-response-from-map reason")

  (is (=
       (h/response 200 {} "test" "1.1" "OK")
       (h/create-response-from-string "test")) "create-response-from-string"))

(def send-response-examples [["send body"
                              (h/response 200 {:content-type "text/plain"} "Content!" nil nil)
                              "Content!"]])

(deftest test-send-response
  (foreach [[name response result] send-response-examples]
    (is (output? result (h/emit-response response)) name)))
