(ns phel-test\test\core\for-loop
  (:require phel\test :refer [deftest is]))

(deftest test-range
  (is (= [0 1 2] (range 3)) "(range 3)")
  (is (= [1 2] (range 1 3)) "(range 1 3)")
  (is (= [0 2] (range 0 4 2)) "(range 0 4 2)")
  (is (= [0 2 4] (range 0 5 2)) "(range 0 5 2)"))

(deftest test-repeat
  (is (= [:a :a :a] (repeat 3 :a)) "(repeat 3 :a)")
  (is (= [] (repeat 0 :a)) "(repeat 0 :a)"))

(deftest test-for-loop
  (is (= [0 1 2] (for [x :range [0 3]] x)) "for loop (:range)")
  (is (= [3 2 1] (for [x :range [3 0 -1]] x)) "for loop dec (:range)")
  (is (= [2 3 4] (for [x :in [1 2 3]] (inc x))) "for loop (:in)")
  (is (= [1 2 3] (for [x :in {:a 1 :b 2 :c 3}] x)) "for loop on hash map (:in)")
  (is (= [:a :b :c] (for [x :keys {:a 1 :b 2 :c 3}] x)) "for loop on map (:keys)")
  (is (= [[1 :a] [2 :b] [3 :c]] (for [[k v] :pairs {:a 1 :b 2 :c 3}] [v k])) "for loop on map (:pairs)")
  (is (= [2 2 2] (for [x :in [2 2 2 3 3 4 5 6 6] :while (even? x)] x)) "for loop (:range :while)")
  (is (= [2 2 2 4 6 6] (for [x :in [2 2 2 3 3 4 5 6 6] :when (even? x)] x)) "for loop (:range :when)")
  (is (= [[1 2] [2 3] [3 4]] (for [x :in [1 2 3] :let [y (inc x)]] [x y])) "for loop (:range :let)")
  (is (= [[1 0] [2 0] [2 1] [3 0] [3 1] [3 2]] (for [x :range [0 4] y :range [0 x]] [x y])) "for loop nested"))

(deftest test-for-loop-big
  (is
   (=
    {0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19}
    (let [x (transient {})] (for [i :range [0 20]] (put x i i)) (persistent x)))
    "for loop with transient map"))

(deftest test-reduce
  (is (= 6 (for [x :in [1 2 3] :reduce [acc 0]] (+ acc x))) "for loop reduce sum")
  (is (= "123" (for [x :in [1 2 3] :reduce [acc ""]] (str acc x))) "for loop reduce str"))
